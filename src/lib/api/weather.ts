const SERVICE_KEY = process.env.NEXT_PUBLIC_WEATHER_API_KEY!;
const BASE_URL = process.env.NEXT_PUBLIC_WEATHER_BASE_URL!;

// Í∏∞ÏÉÅÏ≤≠Ïù¥ Ï†úÍ≥µÌïòÎäî base_time Î™©Î°ù (1ÏãúÍ∞Ñ Îã®ÏúÑ)
const BASE_TIMES = [
  "0200",
  "0500",
  "0800",
  "1100",
  "1400",
  "1700",
  "2000",
  "2300",
];

// ÌòÑÏû¨ ÏãúÍ∞Ñ Í∏∞Ï§Ä Í∞ÄÏû• Í∞ÄÍπåÏö¥ base_time Ï∞æÍ∏∞
const getBaseTime = () => {
  const now = new Date();
  now.setMinutes(0, 0, 0); // Î∂ÑÍ≥º Ï¥à Ï¥àÍ∏∞Ìôî
  let currentHour = now.getHours();

  // Í∞ÄÏû• Í∞ÄÍπåÏö¥ base_time Ï∞æÍ∏∞ (Í∏∞ÏÉÅÏ≤≠ Ï†úÍ≥µ ÏãúÍ∞Ñ Í∏∞Ï§Ä)
  let selectedBaseTime = BASE_TIMES.findLast(
    (t) => parseInt(t) <= currentHour * 100
  );

  if (!selectedBaseTime) {
    // ÏÉàÎ≤Ω 2Ïãú Ïù¥Ï†ÑÏù¥Î©¥, Ï†ÑÎÇ† 2300 Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    selectedBaseTime = "2300";
    now.setDate(now.getDate() - 1);
  }

  console.log("ÌòÑÏû¨ ÏãúÍ∞Å:", now.toISOString());
  console.log("ÏÑ†ÌÉùÎêú base_time:", selectedBaseTime);

  return {
    baseDate: now.toISOString().split("T")[0].replace(/-/g, ""), // YYYYMMDD
    baseTime: selectedBaseTime,
  };
};

// ÌïÑÏöîÌïú Í∏∞ÏÉÅ ÏöîÏÜå Î™©Î°ù
const WEATHER_CATEGORIES = [
  "TMP", // Í∏∞Ïò® (¬∞C)
  "UUU", // ÎèôÏÑú Î∞îÎûåÏÑ±Î∂Ñ (m/s)
  "VVV", // ÎÇ®Î∂Å Î∞îÎûåÏÑ±Î∂Ñ (m/s)
  "WSD", // ÌíçÏÜç (m/s)
  "SKY", // ÌïòÎäò ÏÉÅÌÉú (1~4: ÎßëÏùå~ÌùêÎ¶º)
  "PTY", // Í∞ïÏàò ÌòïÌÉú (0: ÏóÜÏùå, 1: ÎπÑ, 2: ÎπÑ/Îàà, 3: Îàà, 4: ÏÜåÎÇòÍ∏∞)
  "POP", // Í∞ïÏàò ÌôïÎ•† (%)
  "REH", // ÏäµÎèÑ (%)
];

export async function getWeather(nx = 54, ny = 125) {
  const { baseDate, baseTime } = getBaseTime();

  const queryParams = new URLSearchParams({
    serviceKey: decodeURIComponent(SERVICE_KEY),
    numOfRows: "100",
    pageNo: "1",
    dataType: "JSON",
    base_date: baseDate,
    base_time: baseTime,
    nx: nx.toString(),
    ny: ny.toString(),
  });

  const url = `${BASE_URL}?${queryParams.toString()}`;
  console.log("API ÏöîÏ≤≠ URL:", url);

  try {
    const response = await fetch(url);
    const data = await response.json();

    console.log("üìå API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", data);

    if (!data.response || data.response.header.resultCode !== "00") {
      console.error("Í∏∞ÏÉÅÏ≤≠ API ÏùëÎãµ Ïò§Î•ò:", data.response.header);
      return null;
    }

    const items = data.response.body.items.item;
    console.log("üìå API Îç∞Ïù¥ÌÑ∞ Î™©Î°ù:", items);

    // ÌòÑÏû¨ ÏãúÍ∞ÑÏóê Í∞ÄÏû• Í∞ÄÍπåÏö¥ fcstTime Ï∞æÍ∏∞
    const now = new Date();
    const currentTime = now.getHours() * 100 + now.getMinutes(); // HHMM ÌòïÏãù
    console.log("ÌòÑÏû¨ ÏãúÍ∞Å (HHMM):", currentTime);

    // Í∞ÄÏû• Í∞ÄÍπåÏö¥ fcstTime ÏÑ†ÌÉù
    const getClosestFcstValue = (category: string) => {
      const foundItems = items
        .filter((item: any) => item.category === category)
        .sort(
          (a: any, b: any) =>
            Math.abs(a.fcstTime - currentTime) -
            Math.abs(b.fcstTime - currentTime)
        );

      return foundItems.length > 0 ? foundItems[0].fcstValue : null;
    };

    // ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Îßå Ï∂îÏ∂ú
    const weatherData = WEATHER_CATEGORIES.reduce(
      (acc, category) => {
        acc[category as keyof typeof acc] = getClosestFcstValue(category);
        return acc;
      },
      {
        TMP: null,
        UUU: null,
        VVV: null,
        WSD: null,
        SKY: null,
        PTY: null,
        POP: null,
        REH: null,
      } as {
        TMP: string | null;
        UUU: string | null;
        VVV: string | null;
        WSD: string | null;
        SKY: string | null;
        PTY: string | null;
        POP: string | null;
        REH: string | null;
      }
    );

    return weatherData;
  } catch (error) {
    console.error("Í∏∞ÏÉÅÏ≤≠ API Ïò§Î•ò:", error);
    return null;
  }
}
